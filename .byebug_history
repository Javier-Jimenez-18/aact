q
c
RSS::Parser.parse("#{@added_url}&start=#{start}", false)
"#{@added_url}&start=#{start}"
n
start
step
n
@changed_url
n
@changed_url
n
@changed_url
n
@changed_url
n
@changed_url
n
ids.size
case
n
10000..(1.0/0.0)
(1.0/0.0)
n
c
n
changed_ids
n
find_almost_matching_expectation(message, *args)
n
(stub && !expectation)
(stub && expectation && expectation.called_max_times?)
n
find_matching_method_stub(message, *args)
expectation
n
args
*args
8args
message
n
message
step
n
step
method_name
step
n
args
step
block
&block
args
*args
self
step
n
method_name
self
step
n
@changed_url
n
step
n
c
n
c
e
n
RSS::Parser.parse("#{@added_url}&start=#{start}", false)
@added_url
n
step
n
step
n
c
q
n
step
n
step
n
step
n
step
n
params[:event_type]
n
step
n
c
n
c
changed_ids
@changed_url
n
step
n
step
atep
n
@rss_reader.get_added_nct_ids
n
step
n
step
n
params[:event_type]
n
step
n
q
c
e
n
e
n
rss
step
n
format
step
@changed_url
n
step
n
step
RSS::Parser.parse("#{@added_url}&start=#{start}", false)
n
step
n
step
stepstep
self
n
step
self
n
step
n
step
n
c
n
c
@changed_url
@chaned_url
c
added_ids
c
added_ids
status=incremental
status
finalize_load
n
step
n
c
@rss_reader
n
step
n
c
q
c
@rss_reader.get_changed_nct_ids
c
n
params[:event_type]
n
step
n
 expect(updater.db_mgr).to receive(:refresh_public_db).never
n
allow(updater).to receive(:sanity_checks_ok?).and_return(false)
n
self
n
@load_event
c
n
params[:event_type]
n
step
n
AACT::Application::AACT_OWNER_EMAIL
<pre>AACT::Application::AACT_OWNER_EMAIL</pre>
n
expect(RSS::Parser).to receive(:parse).exactly(10).times
n
@load_event.save!
@load_event
n
self
attributes.class
n
attributes.is_a?(Array)
step
n
step
n
step
n
params[:restart]
n
step
n
q
n
c
n
c
study
study=Study.new({xml: xml, nct_id: nct_id}).create
n
study.save!
study
n
pp xml
Study.find_by(nct_id: nct_id)
n
q
a=attribs
attribs
study.errors
study.save
pp study
n
pp xml
n
q
pp xml
xml
pp study
study
pp xml
pp study
pp xml
pp study
study
n
pp xml
xml=Nokogiri::XML(File.read("spec/support/xml_data/#{nct_id}.xml"))
n
pp study
n
pp a
a
a.errors
a
a = Study.new({xml: xml, nct_id: nct_id})
pp xml
xml
xml=Nokogiri::XML(File.read("spec/support/xml_data/#{nct_id}.xml"))
